/* For this project, I downloaded Spotify data from Kaggle. */
/* Then I created a table to insert Spotify data into. */
/* Finally, I performed analytics on the data using SQL. */

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

/* Then I inserted the Spotify Data .csv into the table */

/* Next, I explored the data using the following SQL. */

/* First I determined the avg popularity, danceability, and energy by artist and track. */
/* I also ordered the tracks from most popular to least */

SELECT artist_name ,track_name ,avg(popularity) ,avg(danceability) ,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name
ORDER BY avg(popularity) desc;

/* Then I determined who the Top 10 artists are by danceability */

SELECT track_name, artist_name, danceability
FROM BIT_DB.spotifydata
ORDER BY danceability desc
LIMIT 10;

/* I then wanted to see how many songs Bad Bunny had in the data */

SELECT track_name, artist_name
FROM BIT_DB.spotifydata
WHERE artist_name = "Bad Bunny";

/* I also wanted to see how many songs Dua Lipa had in the data + order by popularity */

SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
WHERE artist_name = "Dua Lipa"
ORDER BY popularity DESC;

/*I then determined the average energy per artist + ordered them most to least energetic */

SELECT artist_name, avg(energy) as avg_energy
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY avg_energy DESC; 

/* I then filtered the data to show the top 10 songs (based on average popularity) + their danceability. */

SELECT artist_name, avg(popularity) AS avg_popularity, danceability
FROM BIT_DB.spotifydata
GROUP BY artist_name 
ORDER BY avg_popularity DESC
LIMIT 10;

/* I then wanted to see the song with the most tempo */

SELECT artist_name, track_name, tempo
FROM BIT_DB.Spotifydata
ORDER BY tempo DESC
LIMIT 1;